# Default values for vector-agent.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: timberio/vector
  pullPolicy: IfNotPresent
  # Overrides the image tag, the default is `{image.version}-{image.base}`.
  tag: ""
  # Overrides the image version, the default is the Chart appVersion.
  version: ""
  base: "debian"

# Image pull secrets to use at the `Pod`s managed by `DaemonSet`.
imagePullSecrets: []

# Override the chart name used in templates.
nameOverride: ""
# Override the full chart name (name prefixed with release name) used in
# templates.
fullnameOverride: ""

updateStrategy: RollingUpdate

serviceAccount:
  # Specifies whether a service account should be created.
  create: true
  # Annotations to add to the service account.
  annotations: {}
  # The name of the service account to use.
  # If not set and `create` is true, a name is generated using the `fullname`
  # template.
  name: ""
  # Automount API credentials for a service account.
  automountServiceAccountToken: true

# Add an annotation to the `Pod`s managed by `DaemonSet` with a random value,
# generated at Helm Chart template evaluation time.
# Enabling this will cause the `Pod`s to be recreated every time the value
# changes - effectively restarting them on each update.
podRollmeAnnotation: false

# Add an annotation to the `Pod`s managed by `DaemonSet` with a checksum of
# the Helm release values (as in `values.yml` content and `--set` flags).
# Enabling this will cause the `Pod`s to be recreated every time values
# change.
podValuesChecksumAnnotation: false

# Annotations to add to the `Pod`s managed by `DaemonSet`.
podAnnotations: {}

# Labels to add to the `Pod`s managed by `DaemonSet`.
podLabels: {}

# PodSecurityContext to set at the `Pod`s managed by `DaemonSet`.
podSecurityContext:
  {}
  # fsGroup: 2000

# Security context to set at the `vector` container at the `Pod`s managed by
# `DaemonSet`.
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Extra env vars to pass to the `vector` container.
env: []

# Tolerations to set for the `Pod`s managed by `DaemonSet`.
tolerations:
  # This toleration is to have the `DaemonSet` runnable on master nodes.
  # Remove it if your masters can't run pods.
  - key: node-role.kubernetes.io/master
    effect: NoSchedule

# Various tweakables for the `Pod`s managed by `DaemonSet`.
resources: {}
nodeSelector: {}
affinity: {}

# Additional container ports to pass to the `vector` container of the `Pod`s
# managed by `DaemonSet`.
extraContainersPorts: []

# Additional sources to include at the `config-dir` projection of the `Pod`s
# managed by `DaemonSet`.
extraConfigDirSources: []

# Additional volumes to pass to the `Pod`s managed by `DaemonSet`.
extraVolumes: []

# Additional volume mounts to pass to the `vector` container of the `Pod`s
# managed by `DaemonSet`.
extraVolumeMounts: []

rbac:
  # Whether to create rbac resources or not. Disable for non-rbac clusters.
  enabled: true

psp:
  # Whether to create `PodSecurityPolicy` or not.
  enabled: false

# Set this to non-empty value to use existing `ConfigMap` for `vector`, instead
# of using a generated one.
existingConfigMap: ""

# Global parts of the generated `vector` config.
globalOptions:
  # Specifies the (in-container) data dir used by `vector`.
  dataDir: "/vector-data-dir"

# Schema part of the generated `vector` config.
logSchema:
  hostKey: "host"
  messageKey: "message"
  sourceTypeKey: "source_type"
  timestampKey: "timestamp"

# The Vector API.
# Will be disabled by default.
vectorApi:
  # Turn the Vector API on or off.
  enabled: false
  # The address to listen at.
  address: "0.0.0.0:8686"
  # Enable or disable the built-in GraphQL Playground (a web IDE for working on GraphQL queries).
  playground: true

# The "built-in" kubernetes logs source to collect logs from the `Pod`s running
# on the `Node`.
# Will be added by default, unless explicitly disabled.
kubernetesLogsSource:
  # Disable to omit the kubernetes logs source from being added.
  enabled: true
  # The name to use for the "built-in" kubernetes logs source.
  sourceId: kubernetes_logs
  # Additional config to embed at the kubernetes logs source.
  config:
    extra_label_selector: "vector.dev/enable=true"
  # Raw TOML config to embed at the kubernetes logs source (deprecated).
  rawConfig: null

# The "built-in" vector sink, to send the logs to the vector aggregator.
# Disabled by default when using `vector-agent` chart.
# Enabled by default when using `vector` chart, and automatically configured.
vectorSink:
  # Disable to omit the vector sink from being added.
  enabled: false
  # The name to use for the "built-in" vector sink.
  sinkId: vector_sink
  # Inputs of the built-in vector sink.
  inputs: null # ["my_input_1", "my_input_2"]
  # The host of the Vector to send the data to.
  host: null # "vector.internal"
  # The port of the Vector to send the data to.
  port: null # 9000
  # Additional config to embed at the vector sink.
  config:
    {}
    # option: "value"
  # Raw TOML config to embed at the vector sink (deprecated).
  rawConfig: null

# The "built-in" internal metrics source emitting Vector's internal opertaional
# metrics.
internalMetricsSource:
  # Disable to omit the internal metrics source from being added.
  enabled: true
  # The name to use for the "built-in" internal metrics source.
  sourceId: internal_metrics
  # Additional config to embed at the internal metrics source.
  config:
    {}
    # option: "value"
  # Raw TOML config to embed at the internal metrics source (deprecated).
  rawConfig: null

# The "built-in" host metrics source emitting the metrics gathered from the node
# that Vector is executing on.
hostMetricsSource:
  # Disable to omit the host metrics source from being added.
  enabled: true
  # The name to use for the "built-in" host metrics source.
  sourceId: host_metrics
  # Additional config to embed at the host metrics source.
  config:
    filesystem:
      mountpoints:
        excludes: ["*/proc/sys/fs/binfmt_misc"]
      devices:
        excludes: [binfmt_misc]
      filesystems:
        excludes: [binfmt_misc]
    # option: "value"
  # Raw TOML config to embed at the host metrics source (deprecated).
  rawConfig: null

# The "built-in" prometheus sink exposing metrics in the Prometheus scraping
# format.
# When using this "built-in" sink, we automatically configure container ports,
# and ensure things are ready for discovery and scraping via Prometheus'
# `kubernetes_sd_configs` jobs.
prometheusSink:
  # Disable to omit the prometheus sink from being added.
  enabled: true
  # The name to use for the "built-in" prometheus sink.
  sinkId: prometheus_sink
  # Inputs of the built-in prometheus sink.
  # If you have built-in internal metrics source enabled, we'll add it as a
  # input here under the hood, so you don't have to pass it here.
  # Unless `excludeInternalMetrics` is set to `true`, in which case you're
  # responsible of wiring up the internal metrics.
  inputs: []
  # Set this to `true` to opt-out from automatically adding the built-in
  # internal metrics source to the inputs.
  excludeInternalMetrics: false
  # The address to listen at.
  listenAddress: "0.0.0.0"
  # The port to listen at.
  listenPort: "9090"
  # Additional config to embed at the prometheus sink.
  config:
    {}
    # option: "value"
  # Raw TOML config to embed at the prometheus sink (deprecated).
  rawConfig: null
  # Add Prometheus annotations to Pod to opt-in for Prometheus scraping.
  # To be used in clusters that rely on Pod annotations in the form of
  # `prometheus.io/scrape` to discover scrape targets.
  addPodAnnotations: false
  # Use prometheus-operator `PodMonitor` to opt-in for Prometheus scraping.
  # To be used in clusters that rely on prometheus-operator to gether metrics.
  # You might want to set `podMonitorSelectorNilUsesHelmValues=false` if you're
  # using prometheus-operator Helm chart to allow `PodMonitor` resources
  # dicovery in all namespaces.
  podMonitor:
    # Whether to add the `PodMonitor` resource or not.
    # `prometheus-operator` CRDs are necessary, otherwise you'll get an error.
    enabled: false
    # Additional relabelings to include in the `PodMonitor`.
    extraRelabelings: []

# Sources to add to the generated `vector` config (besides "built-in" kubernetes
# logs source).
sources:
  {}
  # source_name:
  #   type: "source_type"
  #   option: "value"
  #   rawConfig: |
  #     option = "value"

# Transforms to add to the generated `vector` config.
transforms:
  json:
    type: "remap"
    inputs: ["kubernetes_logs"]
    rawConfig: |
      source = '''
      del(.file)
      if (.topic == null) {
        .topic = .kubernetes.pod_labels."vector.dev/topic"
      }
      parsed, err = parse_json(.message)
      if (err == null) {
        . = merge!(., parsed)
        del(.message)
      }
      '''
  withTopic:
    type: "filter"
    inputs: ["json"]
    condition: .topic != null

# Sinks to add to the generated `vector` config.
sinks:
  kafka:
    type: "kafka"
    inputs: ["withTopic"]
    bootstrap_servers: "[% kafka_bootstrap_server %]"
    compression: "none"
    key_field: "time"
    topic: "{{ topic }}"
    encoding:
      codec: "json"
  elasticsearch:
    type: "elasticsearch"
    inputs: ["kubernetes_logs"]
    endpoint: "[% elasticsearch_endpoint %]"
    index: "{{ kubernetes.pod_namespace }}-{{ kubernetes.pod_labels.name }}-%F"
